{"version":3,"sources":["Globe.js"],"names":["THREE","createStatsGUI","thisParent","stats1","Stats","showPanel","domElement","style","width","height","appendChild","camera","controls","scene","renderer","cube","material","stats","container","latitude","longitude","objects","sphereLon","sphereLat","globeRadius","TransformMatrix","position","Vector3","rotation","Euler","quaternion","Quaternion","scale","matrix","cubePos","lglt2xyz","x","y","z","setFromEuler","compose","clamp","num","min","max","Math","init","main","render","animate","degreeToRadian","angle","radians","PI","map_range","value","low1","high1","low2","high2","radius","r","s","sin","cos","targetId","showStat","Scene","background","Color","fog","FogExp2","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","document","getElementById","body","dom","PerspectiveCamera","set","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","VietNam","American","China","Belarus","Cameroon","AddPin","getCurve","DrawGlobe","DrawSphereDot","Light","addEventListener","onWindowResize","p1","p2","v1","v2","pointCount","points","i","p","lerpVectors","normalize","multiplyScalar","console","log","push","path","CatmullRomCurve3","geometry","TubeGeometry","MeshNormalMaterial","mesh","Mesh","add","SphereBufferGeometry","loader","TextureLoader","MeshBasicMaterial","transparent","side","DoubleSide","alphaTest","map","load","materialMesh","SphereGeometry","visibilityForCoordinate","long","lat","latLonToOffsets","mapWidth","mapHeight","FE","lonRad","latRad","verticalOffsetFromEquator","tan","BoxGeometry","BoxBufferGeometry","BoxMaterial","Matrix4","InstancedMesh","t","a","abs","offset","setMatrixAt","dirLight1","DirectionalLight","dirLight2","ambientLight","AmbientLight","aspect","updateProjectionMatrix","requestAnimationFrame","update"],"mappings":"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","sourcesContent":["function createStatsGUI(){\n\n    var thisParent;\n\n    //Create new Graph (FPS, MS, MB)\n    stats1 = new Stats();\n\n    //Display different panel\n    stats1.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n    stats1.domElement.style.width = '200px';\n    stats1.domElement.style.height = '200px';\n\n    //Add Stats to Document - modal 4\n    thisParent.appendChild( stats1.domElement );  \n    }\n\n    import * as THREE from './build/three.module.js';\n    import Stats from './jsm/libs/stats.module.js';\n    import { OrbitControls } from './jsm/controls/OrbitControls.js';\n\n    let camera, controls, scene, renderer;\n    let cube;\n    let material;\n    let stats, container;\n    let latitude, longitude;\n\n    const objects = [];\n\n\n    const sphereLon = 50\n    const sphereLat = sphereLon/2;\n    const globeRadius = 100;\n\n\n    const TransformMatrix = function () {\n\n        const position = new THREE.Vector3();\n        const rotation = new THREE.Euler();\n        const quaternion = new THREE.Quaternion();\n        const scale = new THREE.Vector3();\n\n        return function ( matrix ) {\n\n            const cubePos = lglt2xyz(latitude, longitude, globeRadius); \n\n            position.x = cubePos.x;\n            position.y = cubePos.y;\n            position.z = cubePos.z;\n\n            rotation.x = rotation.y = rotation.z = 0;\n\n            quaternion.setFromEuler( rotation );\n\n            scale.x = scale.y = scale.z = 1;\n\n            matrix.compose( position, quaternion, scale );\n\n        };\n\n    }();\n    \n    const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n    init(\"aboutGlobeFull\");\n    main();\n    render(); // remove when using next line for animation loop (requestAnimationFrame)\n    animate();\n\n    function degreeToRadian(angle) {\n            const radians = Math.PI / 180\n            return angle * radians;\n        }\n\n    function map_range(value, low1, high1, low2, high2) {\n        return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    }\n\n    //longtidude, latitude to XYZ\n    function lglt2xyz(longitude,latitude,radius){\n        const r = degreeToRadian(90 - longitude)\n        const s = degreeToRadian(latitude + (180));\n        const x = (-radius * Math.sin(r) * Math.cos(s));\n        const y = (radius * Math.cos(r));\n        const z = (radius * Math.sin(r) * Math.sin(s));\n        return new THREE.Vector3(x, y, z)\n    }\n    \n\n\n    function init(targetId=null, showStat=true) {\n\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0xcccccc );\n        scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        if (targetId) {\n            document.getElementById(targetId).appendChild( renderer.domElement );\n        } else {\n            document.body.appendChild( renderer.domElement );\n        }\n\n        if (showStat) {\n            stats = new Stats();\n            document.body.appendChild( stats.dom );\n        }\n\n        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.set( 400, 200, 0 );\n\n\n        // controls\n        controls = new OrbitControls( camera, renderer.domElement );\n        //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n        controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n        controls.dampingFactor = 0.05;\n        controls.screenSpacePanning = false;\n        controls.minDistance = 100;\n        controls.maxDistance = 500;\n        controls.maxPolarAngle = Math.PI / 2;\n\n    }\n\n\n    function main() {\n\n        let VietNam = lglt2xyz ( 14.05, 108.27, globeRadius);\n        let American = lglt2xyz ( 41.81, -94.40, globeRadius);\n        let China = lglt2xyz ( 37.98, 103.37, globeRadius)\n        let Belarus = lglt2xyz (53.00, 28.00, globeRadius);\n        let Cameroon = lglt2xyz (6, 12, globeRadius);\n\n\n        //Add Pin Location\n        AddPin(VietNam.x, VietNam.y, VietNam.z);\n        AddPin(American.x, American.y, American.z);\n        AddPin(China.x, China.y, China.z);\n\n        //curve\n        getCurve(VietNam, American);\n        getCurve(VietNam, China);\n        getCurve(VietNam, Belarus);\n        getCurve(VietNam, Cameroon);\n        \n        \n\n        DrawGlobe();\n        DrawSphereDot();\n        Light();\n        window.addEventListener( 'resize', onWindowResize );\n\n    };\n\n    function getCurve(p1, p2) {\n\n        let v1 = new THREE.Vector3(p1.x, p1.y , p1.z);\n        let v2 = new THREE.Vector3(p2.x, p2.y, p2.z);\n        let pointCount = 20;\n\n        let points = []\n\n        for (let i = 0; i < pointCount; i++) {\n            let p = new THREE.Vector3().lerpVectors(v1, v2, ( i/pointCount ));\n            p.normalize()\n            p.multiplyScalar(globeRadius)\n\n            p.multiplyScalar(1 + 0.2*Math.sin(Math.PI*i/pointCount))\n            \n            console.log(p.x);\n            points.push(p)\n        }\n\n        let path = new THREE.CatmullRomCurve3(points);\n        //console.log(path);\n\n        const geometry = new THREE.TubeGeometry (path, 64, 0.5, 32, false);\n        const material = new THREE.MeshNormalMaterial();\n        const mesh = new THREE.Mesh ( geometry, material);\n        scene.add( mesh )\n\n    }\n\n\n    function AddPin(x,y,z) {\n\n        //add pin\n        let mesh = new THREE.Mesh(\n            new THREE.SphereBufferGeometry(2,20,20),\n            new THREE.MeshNormalMaterial()\n        )\n\n        mesh.position.set(x,y,z);\n        scene.add(mesh);\n\n    }\n\n\n    function DrawGlobe() {\n\n        const loader = new THREE.TextureLoader();\n        \n        const material = new THREE.MeshBasicMaterial({\n            //color: 0xFF8844,\n            transparent: true,\n            side: THREE.DoubleSide,\n            alphaTest: 0.5,\n            map: loader.load('./textures/earth_region.png'),\n            });\n        \n        const materialMesh = new THREE.Mesh(\n            new THREE.SphereGeometry(globeRadius-5,32,32),\n            material\n        )\n\n        scene.add(materialMesh);\n\n    };\n\n\n    function visibilityForCoordinate(long, lat) {\n\n        //const imagedata;\n        //get long, lat corndinate, \n        //read image data if data = 255 true, else false\n\n    }\n\n    function latLonToOffsets(latitude, longitude, mapWidth, mapHeight) {\n        const radius = mapWidth / (2 * Math.PI);\n        const FE = 180; // false easting\n\n        const lonRad = degreeToRadian(longitude + FE);\n        const x = lonRad * radius;\n\n        const latRad = degreeToRadian(latitude);\n        const verticalOffsetFromEquator =\n            radius * Math.log(Math.tan(Math.PI / 4 + latRad / 2));\n        const y = mapHeight / 2 - verticalOffsetFromEquator;\n\n        return { x, y };\n        \n    }\n    \n    function DrawSphereDot() {\n\n        const BoxGeometry = new THREE.BoxBufferGeometry( 0.5, 0.5, 0.5 );\n        const BoxMaterial = new THREE.MeshNormalMaterial();\n        const matrix = new THREE.Matrix4();\n        const mesh = new THREE.InstancedMesh( BoxGeometry, BoxMaterial, 32475 );\n        let t = 1;\n\n        for (  latitude = -90; latitude < 90; latitude += 1) { \n            const a = Math.abs((Math.abs(latitude)) - 90) ;\n\n            for (  longitude = 0; longitude < 360; longitude += 360/(4*a) ) { \n                //find x,y offset\n                const offset = latLonToOffsets(latitude, longitude, 2048, 1024);\n                //find alpha base on x,y\n                t++;\n                TransformMatrix( matrix );\n                //set matrix transformation\n                mesh.setMatrixAt( t, matrix );\n\n            }\n        }\n\n        scene.add( mesh );\n\n\n    }\n\n\n\n\n\n\n    function Light() {\n\n        const dirLight1 = new THREE.DirectionalLight( 0xffffff );\n        dirLight1.position.set( 1, 1, 1 );\n        scene.add( dirLight1 );\n\n        const dirLight2 = new THREE.DirectionalLight( 0x002288 );\n        dirLight2.position.set( - 1, - 1, - 1 );\n        scene.add( dirLight2 );\n\n        const ambientLight = new THREE.AmbientLight( 0x222222 );\n        scene.add( ambientLight );\n\n    }\n\n\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n\n    function animate() {\n\n        requestAnimationFrame( animate );\n        controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n        //DrawSphereDot();\n        render();\n        stats.update()\n\n    }\n\n    function render() {\n        \n        renderer.render( scene, camera );\n\n    }"]}